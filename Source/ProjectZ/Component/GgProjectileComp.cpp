// Fill out your copyright notice in the Description page of Project Settings.


#include "GgProjectileComp.h"
#include "Actor/GgProjectile.h"
#include "Manager/GgDataInfoManager.h"

UGgProjectileComp::UGgProjectileComp()
{
	PrimaryComponentTick.bCanEverTick = true;
}

UGgProjectileComp::~UGgProjectileComp()
{

}

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// @brief Begin
/////////////////////////////////////////////////////////////////////////////////////////////////////
void UGgProjectileComp::BeginPlay()
{
	Super::BeginPlay();

	_Init();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// @brief Tick
/////////////////////////////////////////////////////////////////////////////////////////////////////
void UGgProjectileComp::TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction )
{
	Super::TickComponent( DeltaTime, TickType, ThisTickFunction );

	_ProcessMove();
	_ProcessTime( DeltaTime );
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// @brief 공격 성공 처리를 한다.
/////////////////////////////////////////////////////////////////////////////////////////////////////
void UGgProjectileComp::OnAttackSuccess()
{
	Stat.Hp = 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// @brief 초기화 한다.
/////////////////////////////////////////////////////////////////////////////////////////////////////
void UGgProjectileComp::_Init()
{
	AGgProjectile* proj = Cast< AGgProjectile >( GetOwner() );
	if( !proj )
		return;

	const auto& projInfo = GetGgDataInfoManager().GetProjectileInfos().Find( proj->InfoId );
	if( !projInfo )
		return;

	AttackCollData = projInfo->AttackCollData;
	LifeTime = projInfo->LifeTime;

	const FRotator rotation = OwningActor->GetActorRotation();
	Direction = FRotationMatrix( rotation ).GetUnitAxis( EAxis::X );

	SetAttackCollData( AttackCollData );
	SetIsEnabledAttackColl( true );
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// @brief 이동 관련 로직을 수행한다.
/////////////////////////////////////////////////////////////////////////////////////////////////////
void UGgProjectileComp::_ProcessMove()
{
	if( !OwningActor.IsValid() ) return;

	float moveSpeed = GetWorld()->GetDeltaSeconds() * Stat.MoveSpeed * CONST::ANIM_LERP_MULITPLIER;
	OwningActor->SetActorLocation( OwningActor->GetActorLocation() + ( Direction * moveSpeed ), true );
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// @brief 시간 관련 로직을 수행한다.
/////////////////////////////////////////////////////////////////////////////////////////////////////
void UGgProjectileComp::_ProcessTime( float InDeltaTime )
{
	LifeTimeAcc += InDeltaTime;

	if( LifeTimeAcc >= LifeTime )
		Stat.Hp = 0;
}